/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/admin/restaurants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all restaurants (Super Admin only) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of all restaurants */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            results?: number;
                            data?: {
                                restaurants?: components["schemas"]["Restaurant"][];
                            };
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Create a new restaurant (Super Admin only) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RestaurantInput"];
                };
            };
            responses: {
                /** @description Restaurant created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                restaurant?: components["schemas"]["Restaurant"];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden (Not Super Admin) */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Owner user not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/restaurants/{restaurantId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a single restaurant by ID (Super Admin only) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the restaurant */
                    restaurantId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Restaurant details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                restaurant?: components["schemas"]["Restaurant"];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Restaurant not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a restaurant (Super Admin only) */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the restaurant to delete */
                    restaurantId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Restaurant deleted successfully (No Content) */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Restaurant not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a restaurant (Super Admin only) */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the restaurant to update */
                    restaurantId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name?: string;
                        /** Format: mongoId */
                        owner_id?: string;
                        description?: string;
                        address?: components["schemas"]["Address"];
                        contact?: components["schemas"]["Contact"];
                        cuisine_types?: string[];
                        images?: string[];
                        payment_options?: string[];
                        /** @enum {string} */
                        status?: "active" | "inactive" | "pending_approval";
                    };
                };
            };
            responses: {
                /** @description Restaurant updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                restaurant?: components["schemas"]["Restaurant"];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Restaurant or New Owner not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserInput"];
                };
            };
            responses: {
                /** @description User registered successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                user?: components["schemas"]["User"];
                            };
                        };
                    };
                };
                /** @description Bad Request (e.g., validation error, email already exists) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Log in a user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginUserInput"];
                };
            };
            responses: {
                /** @description Login successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            /**
                             * @description JWT authentication token
                             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                             */
                            token?: string;
                            data?: {
                                user?: components["schemas"]["User"];
                            };
                        };
                    };
                };
                /** @description Bad Request (e.g., validation error) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized (e.g., incorrect credentials) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the currently logged-in user's details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved user details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                user?: components["schemas"]["User"];
                            };
                        };
                    };
                };
                /** @description Unauthorized (e.g., token missing or invalid) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new customer for the restaurant */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CustomerInput"];
                };
            };
            responses: {
                /** @description Customer created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                customer?: components["schemas"]["Customer"];
                            };
                        };
                    };
                };
                /** @description Bad Request (validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customers/restaurant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all customers for the user's restaurant */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of customers */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            results?: number;
                            data?: {
                                customers?: components["schemas"]["Customer"][];
                            };
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customers/{customerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific customer by ID (within user's restaurant) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the customer */
                    customerId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Customer details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                customer?: components["schemas"]["Customer"];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Customer not found in this restaurant */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a customer (within user's restaurant) */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the customer to delete */
                    customerId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Customer deleted successfully (No Content) */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Customer not found in this restaurant */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a customer's details (within user's restaurant) */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the customer to update */
                    customerId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name?: string;
                        phone?: string;
                        /** Format: email */
                        email?: string;
                    };
                };
            };
            responses: {
                /** @description Customer updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                customer?: components["schemas"]["Customer"];
                            };
                        };
                    };
                };
                /** @description Bad Request (validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Customer not found in this restaurant */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/customers/{customerId}/loyalty": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Adjust loyalty points for a customer */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the customer */
                    customerId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Amount to add (positive) or deduct (negative) */
                        pointsChange: number;
                        /** @description Optional reason for adjustment */
                        reason?: string;
                    };
                };
            };
            responses: {
                /** @description Loyalty points adjusted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                customer?: components["schemas"]["Customer"];
                            };
                        };
                    };
                };
                /** @description Bad Request (validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Customer not found in this restaurant */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feedback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit new feedback for a restaurant */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateFeedbackDto"] & {
                        /**
                         * Format: mongoId
                         * @description Required if submitting to a public feedback endpoint. Otherwise, taken from authenticated user.
                         */
                        restaurant_id?: string;
                    };
                };
            };
            responses: {
                /** @description Feedback submitted successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Feedback"];
                    };
                };
                /** @description Bad Request (validation error) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized (if auth is required and missing/invalid) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Restaurant not found (if restaurant_id provided and invalid) */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feedback/restaurant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all feedback for the user's restaurant */
        get: {
            parameters: {
                query?: {
                    /** @description Optional. Filter by addressed status (true or false). */
                    is_addressed?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of feedback entries */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Feedback"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feedback/{feedbackId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific feedback entry by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the feedback entry */
                    feedbackId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Feedback details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Feedback"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Feedback not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feedback/{feedbackId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update the addressed status of a feedback entry */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the feedback to update */
                    feedbackId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateFeedbackDto"];
                };
            };
            responses: {
                /** @description Feedback status updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Feedback"];
                    };
                };
                /** @description Bad Request (validation error) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Feedback not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/inventory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new inventory item */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["InventoryItemInput"];
                };
            };
            responses: {
                /** @description Inventory item created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                inventoryItem?: components["schemas"]["InventoryItem"];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory/restaurant/{restaurantId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all inventory items for a specific restaurant */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the restaurant */
                    restaurantId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of inventory items */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            results?: number;
                            data?: {
                                inventoryItems?: components["schemas"]["InventoryItem"][];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory/{itemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a single inventory item by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the inventory item */
                    itemId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Inventory item details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                inventoryItem?: components["schemas"]["InventoryItem"];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Inventory item not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete an inventory item */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the item to delete */
                    itemId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Inventory item deleted successfully (No Content) */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Inventory item not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update an inventory item's details (excluding stock) */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the item to update */
                    itemId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name?: string;
                        unit?: string;
                        low_stock_threshold?: number;
                    };
                };
            };
            responses: {
                /** @description Inventory item updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                inventoryItem?: components["schemas"]["InventoryItem"];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Inventory item not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/inventory/{itemId}/stock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Adjust the stock level of an inventory item */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the item to adjust stock for */
                    itemId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateStockLevelInput"];
                };
            };
            responses: {
                /** @description Stock level adjusted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                inventoryItem?: components["schemas"]["InventoryItem"];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Inventory item not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new menu item */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["MenuItemInput"];
                };
            };
            responses: {
                /** @description Menu item created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                menuItem?: components["schemas"]["MenuItem"];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu/restaurant/{restaurantId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all menu items for a specific restaurant */
        get: {
            parameters: {
                query?: {
                    /** @description Optional category to filter menu items */
                    category?: string;
                };
                header?: never;
                path: {
                    /** @description The ID of the restaurant */
                    restaurantId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of menu items */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            results?: number;
                            data?: {
                                menuItems?: components["schemas"]["MenuItem"][];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu/{itemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a single menu item by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the menu item */
                    itemId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Menu item details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                menuItem?: components["schemas"]["MenuItem"];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Menu item not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a menu item */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the menu item to delete */
                    itemId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Menu item deleted successfully (No Content) */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Menu item not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a menu item */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the menu item to update */
                    itemId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name?: string;
                        category?: string;
                        price?: number;
                        tax_percentage?: number;
                        variants?: components["schemas"]["MenuItemVariant"][];
                        add_ons?: components["schemas"]["MenuItemAddOn"][];
                        is_active?: boolean;
                    };
                };
            };
            responses: {
                /** @description Menu item updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                menuItem?: components["schemas"]["MenuItem"];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Menu item not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/menu-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new menu category */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateMenuCategoryDto"];
                };
            };
            responses: {
                /** @description Menu category created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MenuCategory"];
                    };
                };
                /** @description Bad Request (validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu-categories/restaurant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all menu categories for the user's restaurant */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of menu categories */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MenuCategory"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu-categories/{categoryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific menu category by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the menu category */
                    categoryId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Menu category details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MenuCategory"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Menu category not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a menu category */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the menu category to delete */
                    categoryId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Menu category deleted successfully (No Content) */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request (category has associated menu items) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Menu category not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a menu category */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the menu category to update */
                    categoryId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateMenuCategoryDto"];
                };
            };
            responses: {
                /** @description Menu category updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MenuCategory"];
                    };
                };
                /** @description Bad Request (validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Menu category not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new order */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["OrderInput"];
                };
            };
            responses: {
                /** @description Order created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                order?: components["schemas"]["Order"];
                            };
                        };
                    };
                };
                /** @description Bad Request (validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Menu item or Customer not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/restaurant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all orders for the user's restaurant */
        get: {
            parameters: {
                query?: {
                    /** @description Optional status to filter orders */
                    status?: "pending" | "confirmed" | "preparing" | "ready" | "served" | "completed" | "cancelled";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of orders */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            results?: number;
                            data?: {
                                orders?: components["schemas"]["Order"][];
                            };
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a single order by ID (within user's restaurant) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the order */
                    orderId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Order details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                order?: components["schemas"]["Order"];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Order not found in this restaurant */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{orderId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update the status of an order */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the order to update */
                    orderId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status: "pending" | "confirmed" | "preparing" | "ready" | "served" | "completed" | "cancelled";
                    };
                };
            };
            responses: {
                /** @description Order status updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                order?: components["schemas"]["Order"];
                            };
                        };
                    };
                };
                /** @description Bad Request (invalid status */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Order not found in this restaurant */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/orders/{orderId}/payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Record a payment for an order */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the order to record payment for */
                    orderId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RecordPaymentDto"];
                };
            };
            responses: {
                /** @description Payment recorded and order updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                order?: components["schemas"]["Order"];
                            };
                        };
                    };
                };
                /** @description Bad Request (validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Order not found in this restaurant */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{orderId}/kot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get data formatted for a Kitchen Order Ticket (KOT) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the order */
                    orderId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description KOT data retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            orderId?: string;
                            orderType?: string;
                            tableNo?: string;
                            /** Format: date-time */
                            timestamp?: string;
                            items?: {
                                name?: string;
                                quantity?: number;
                                addOns?: string;
                            }[];
                            notes?: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Order not found in this restaurant */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/purchases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Record a new purchase entry and update stock */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        supplier?: string;
                        invoice_number?: string;
                        /** Format: date-time */
                        purchase_date?: string;
                        items: {
                            /** Format: mongoId */
                            inventory_item_id: string;
                            quantity: number;
                            unit: string;
                            cost_per_unit: number;
                        }[];
                        notes?: string;
                    };
                };
            };
            responses: {
                /** @description Purchase entry recorded successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                purchaseEntry?: Record<string, never>;
                            };
                        };
                    };
                };
                /** @description Bad Request (validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error / Transaction Failed */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/purchases/restaurant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all purchase entries for the user's restaurant */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of purchase entries */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            results?: number;
                            data?: {
                                purchaseEntries?: Record<string, never>[];
                            };
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/purchases/{entryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific purchase entry by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the purchase entry */
                    entryId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Purchase entry details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                purchaseEntry?: Record<string, never>;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Purchase entry not found in this restaurant */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update a recipe for a menu item
         * @description Creates a new recipe if one doesn't exist for the menu item, otherwise updates the existing one.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RecipeInput"];
                };
            };
            responses: {
                /** @description Recipe updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: components["schemas"]["Recipe"];
                        };
                    };
                };
                /** @description Recipe created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: components["schemas"]["Recipe"];
                        };
                    };
                };
                /** @description Bad Request (validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Menu item not found in this restaurant */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipes/menu-item/{menuItemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the recipe for a specific menu item */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the menu item */
                    menuItemId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Recipe details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: components["schemas"]["Recipe"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Recipe or Menu Item not found in this restaurant */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipes/{recipeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a recipe */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the recipe to delete */
                    recipeId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Recipe deleted successfully (No Content) */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Recipe not found in this restaurant */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/sales-summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get sales summary report for a date range */
        get: {
            parameters: {
                query: {
                    /** @description Start date for the report (YYYY-MM-DD) */
                    startDate: string;
                    /** @description End date for the report (YYYY-MM-DD) */
                    endDate: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sales summary report data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                summary?: {
                                    totalOrders?: number;
                                    totalRevenue?: number;
                                    totalTax?: number;
                                    totalDiscount?: number;
                                    averageOrderValue?: number;
                                };
                            };
                        };
                    };
                };
                /** @description Bad Request (invalid date format or range) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/inventory-usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get inventory usage report for a date range */
        get: {
            parameters: {
                query: {
                    /** @description Start date for the report (YYYY-MM-DD) */
                    startDate: string;
                    /** @description End date for the report (YYYY-MM-DD) */
                    endDate: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Inventory usage report data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                /** Format: mongoId */
                                inventoryItemId?: string;
                                itemName?: string;
                                unit?: string;
                                totalQuantityConsumed?: number;
                            }[];
                        };
                    };
                };
                /** @description Bad Request (invalid date format or range) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/restaurants/my-restaurant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details of the restaurant owned/managed by the logged-in user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Restaurant details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                restaurant?: components["schemas"]["Restaurant"];
                            };
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden (User not associated with a restaurant) */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Restaurant not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update details of the restaurant owned/managed by the logged-in user */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name?: string;
                        description?: string;
                        address?: components["schemas"]["Address"];
                        contact?: components["schemas"]["Contact"];
                        cuisine_types?: string[];
                        images?: string[];
                        payment_options?: string[];
                    };
                };
            };
            responses: {
                /** @description Restaurant updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                restaurant?: components["schemas"]["Restaurant"];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Restaurant not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/tables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new table for the restaurant */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateTableDto"];
                };
            };
            responses: {
                /** @description Table created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Table"];
                    };
                };
                /** @description Bad Request (validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden (user not admin/manager of this restaurant) */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tables/restaurant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all tables for the user's restaurant */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of tables */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Table"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tables/{tableId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific table by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the table */
                    tableId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Table details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Table"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Table not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a table */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the table to delete */
                    tableId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Table deleted successfully (No Content) */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request (table has active order) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Table not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a table's details */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the table to update */
                    tableId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateTableDto"];
                };
            };
            responses: {
                /** @description Table updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Table"];
                    };
                };
                /** @description Bad Request (validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Table not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/transactions/order/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all transactions for a specific order */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the order */
                    orderId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of transactions for the order */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            results?: number;
                            data?: {
                                transactions?: components["schemas"]["Transaction"][];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Order not found in this restaurant */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions/{transactionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a single transaction by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the transaction */
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Transaction details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                transaction?: components["schemas"]["Transaction"];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Transaction not found or doesn't belong to user's restaurant */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/restaurant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all users for the admin's restaurant */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of users in the restaurant */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            results?: number;
                            data?: {
                                users?: components["schemas"]["User"][];
                            };
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Create a new user (Manager/Staff) for the admin's restaurant */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name: string;
                        /** Format: email */
                        email: string;
                        phone?: string;
                        /** Format: password */
                        password: string;
                        /** @enum {string} */
                        role: "manager" | "staff";
                        /** Format: url */
                        profile_image?: string;
                        preferences?: components["schemas"]["UserPreferences"];
                        permissions?: components["schemas"]["UserPermissions"];
                    };
                };
            };
            responses: {
                /** @description User created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                user?: components["schemas"]["User"];
                            };
                        };
                    };
                };
                /** @description Bad Request (validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden (Not Admin/Manager or invalid role assignment) */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/restaurant/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific user within the admin's restaurant */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the user to retrieve */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                user?: components["schemas"]["User"];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User not found in this restaurant */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a user within the admin's restaurant */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the user to delete */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User deleted successfully (No Content) */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden (e.g. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User not found in this restaurant */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a user within the admin's restaurant */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the user to update */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name?: string;
                        /** Format: email */
                        email?: string;
                        phone?: string;
                        /** @enum {string} */
                        role?: "manager" | "staff";
                        /** Format: url */
                        profile_image?: string;
                        preferences?: components["schemas"]["UserPreferences"];
                        permissions?: components["schemas"]["UserPermissions"];
                        loyalty_points?: number;
                        /** @enum {string} */
                        status?: "active" | "inactive" | "suspended";
                    };
                };
            };
            responses: {
                /** @description User updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: {
                                user?: components["schemas"]["User"];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User not found in this restaurant */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Table: {
            /** Format: mongoId */
            readonly _id?: string;
            /** Format: mongoId */
            restaurant_id?: string;
            /** @example T1 */
            name?: string;
            /** @example 4 */
            capacity?: number;
            /**
             * @example available
             * @enum {string}
             */
            status?: "available" | "occupied" | "reserved" | "blocked";
            /** Format: mongoId */
            current_order_id?: string | null;
            notes?: string | null;
            /** Format: date-time */
            readonly createdAt?: string;
            /** Format: date-time */
            readonly updatedAt?: string;
        };
        CreateTableDto: {
            /** @example T2 */
            name: string;
            /** @example 2 */
            capacity: number;
            /**
             * @description Optional, defaults to available
             * @enum {string}
             */
            status?: "available" | "occupied" | "reserved" | "blocked";
            notes?: string | null;
        };
        UpdateTableDto: {
            /** @example T2 VIP */
            name?: string;
            /** @example 3 */
            capacity?: number;
            /** @enum {string} */
            status?: "available" | "occupied" | "reserved" | "blocked";
            /**
             * Format: mongoId
             * @description Set to null to clear the current order
             */
            current_order_id?: string | null;
            notes?: string | null;
        };
        MenuCategory: {
            /** Format: mongoId */
            readonly _id?: string;
            /** Format: mongoId */
            restaurant_id?: string;
            /** @example Appetizers */
            name?: string;
            /** @example Starters and small bites */
            description?: string | null;
            /** @default true */
            is_active: boolean;
            /** @default 0 */
            display_order: number;
            /** Format: date-time */
            readonly createdAt?: string;
            /** Format: date-time */
            readonly updatedAt?: string;
        };
        CreateMenuCategoryDto: {
            /** @example Main Course */
            name: string;
            /** @example Hearty main dishes */
            description?: string | null;
            /** @default true */
            is_active: boolean;
            /** @default 0 */
            display_order: number;
        };
        UpdateMenuCategoryDto: {
            /** @example Soups */
            name?: string;
            description?: string | null;
            is_active?: boolean;
            display_order?: number;
        };
        Feedback: {
            /** Format: mongoId */
            readonly _id?: string;
            /** Format: mongoId */
            restaurant_id?: string;
            /** Format: mongoId */
            customer_id?: string | null;
            /** Format: mongoId */
            order_id?: string | null;
            rating?: number;
            comment?: string | null;
            contact_info?: string | null;
            /** @default false */
            is_addressed: boolean;
            /** Format: mongoId */
            addressed_by?: string | null;
            /** Format: date-time */
            addressed_at?: string | null;
            /** Format: date-time */
            readonly createdAt?: string;
            /** Format: date-time */
            readonly updatedAt?: string;
        };
        CreateFeedbackDto: {
            /**
             * Format: mongoId
             * @description Optional ID of the customer providing feedback
             */
            customer_id?: string | null;
            /**
             * Format: mongoId
             * @description Optional ID of the order related to the feedback
             */
            order_id?: string | null;
            /** @description Rating from 1 to 5 */
            rating: number;
            /** @description Optional textual feedback */
            comment?: string | null;
            /** @description Optional contact info if feedback is anonymous */
            contact_info?: string | null;
        };
        UpdateFeedbackDto: {
            /** @description Set to true if feedback has been addressed */
            is_addressed: boolean;
        };
        Customer: {
            /** Format: mongoId */
            _id?: string;
            /** Format: mongoId */
            restaurant_id: string;
            name?: string;
            phone: string;
            /** Format: email */
            email?: string;
            loyalty_points?: number;
            visit_count?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        CustomerInput: {
            /** Format: mongoId */
            restaurant_id: string;
            /** @example Amit Kumar */
            name?: string;
            /** @example 9876543210 */
            phone: string;
            /**
             * Format: email
             * @example amit@example.com
             */
            email?: string;
        };
        InventoryItem: {
            /**
             * @description Unique identifier for the inventory item
             * @example 62f7e1b9b5a5f3a9c8b5c8c1
             */
            _id?: string;
            /**
             * Format: mongoId
             * @description ID of the restaurant this item belongs to
             * @example 60f7e1b9b5a5f3a9c8b5c8a6
             */
            restaurant_id: string;
            /**
             * @description Name of the inventory item
             * @example Paneer
             */
            name: string;
            /**
             * @description Unit of measurement
             * @example kg
             */
            unit: string;
            /**
             * @description Current quantity in stock
             * @example 10
             */
            currentStock: number;
            /**
             * @description Minimum stock level before alert (optional)
             * @example 2
             */
            low_stock_threshold?: number;
            /**
             * Format: date-time
             * @description Timestamp when the stock was last updated (via adjustment)
             */
            readonly last_updated?: string;
            /**
             * Format: date-time
             * @description Timestamp when the item was created
             */
            readonly createdAt?: string;
            /**
             * Format: date-time
             * @description Timestamp when the item record was last updated
             */
            readonly updatedAt?: string;
        };
        InventoryItemInput: {
            /**
             * Format: mongoId
             * @description ID of the restaurant this item belongs to
             * @example 60f7e1b9b5a5f3a9c8b5c8a6
             */
            restaurant_id: string;
            /** @example Milk */
            name: string;
            /** @example ltr */
            unit: string;
            /**
             * @default 0
             * @example 50
             */
            currentStock: number;
            /** @example 10 */
            low_stock_threshold?: number;
        };
        UpdateStockLevelInput: {
            /**
             * @description The amount to add (positive) or remove (negative) from the current stock.
             * @example -5
             */
            changeAmount: number;
            /**
             * @description Optional notes about the stock adjustment (e.g., wastage, purchase order ID).
             * @example Used for Order
             */
            notes?: string;
        };
        MenuItemVariant: {
            /**
             * @description Name of the variant (e.g., Half, Full, Large)
             * @example Half
             */
            name?: string;
            /**
             * Format: float
             * @description Price for this specific variant
             * @example 150
             */
            price?: number;
        };
        MenuItemAddOn: {
            /**
             * @description Name of the add-on
             * @example Extra Cheese
             */
            name?: string;
            /**
             * Format: float
             * @description Additional price for the add-on
             * @example 30
             */
            price?: number;
        };
        MenuItem: {
            /**
             * @description Unique identifier for the menu item
             * @example 61f7e1b9b5a5f3a9c8b5c8b1
             */
            _id?: string;
            /**
             * Format: mongoId
             * @description ID of the restaurant this item belongs to
             * @example 60f7e1b9b5a5f3a9c8b5c8a6
             */
            restaurant_id: string;
            /**
             * @description Name of the menu item
             * @example Paneer Butter Masala
             */
            name: string;
            /**
             * @description Category the item belongs to
             * @example Main Course
             */
            category: string;
            /**
             * Format: float
             * @description Base price of the menu item
             * @example 250
             */
            price: number;
            /**
             * Format: float
             * @description Applicable tax percentage for this item (optional)
             * @example 5
             */
            tax_percentage?: number;
            /** @description Different variants of the item (e.g., sizes) */
            variants?: components["schemas"]["MenuItemVariant"][];
            /** @description Optional add-ons for the item */
            add_ons?: components["schemas"]["MenuItemAddOn"][];
            /**
             * @description Whether the item is currently active/available
             * @default true
             * @example true
             */
            is_active: boolean;
            /**
             * Format: date-time
             * @description Timestamp when the item was created
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Timestamp when the item was last updated
             */
            updatedAt?: string;
        };
        MenuItemInput: {
            /**
             * Format: mongoId
             * @description ID of the restaurant this item belongs to
             * @example 60f7e1b9b5a5f3a9c8b5c8a6
             */
            restaurant_id: string;
            /** @example Dal Makhani */
            name: string;
            /** @example Main Course */
            category: string;
            /**
             * Format: float
             * @example 220
             */
            price: number;
            /**
             * Format: float
             * @example 5
             */
            tax_percentage?: number;
            variants?: components["schemas"]["MenuItemVariant"][];
            add_ons?: components["schemas"]["MenuItemAddOn"][];
            /** @default true */
            is_active: boolean;
        };
        OrderItemAddOn: {
            name?: string;
            price?: number;
        };
        OrderItem: {
            /** Format: mongoId */
            menu_item_id: string;
            name: string;
            quantity: number;
            price: number;
            add_ons?: components["schemas"]["OrderItemAddOn"][];
        };
        Order: {
            /** Format: mongoId */
            _id?: string;
            /** Format: mongoId */
            restaurant_id: string;
            /** @enum {string} */
            order_type: "dine-in" | "takeaway" | "delivery" | "online";
            table_no?: string;
            items: components["schemas"]["OrderItem"][];
            total_amount: number;
            tax_amount?: number;
            discount?: number;
            net_amount: number;
            /** @enum {string} */
            payment_mode?: "Cash" | "Card" | "UPI" | "Wallet" | "Pending";
            /** @enum {string} */
            status?: "pending" | "confirmed" | "preparing" | "ready" | "served" | "completed" | "cancelled";
            /** Format: mongoId */
            created_by: string;
            /** Format: mongoId */
            customer_id?: string;
            notes?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        OrderInput: {
            /** Format: mongoId */
            restaurant_id: string;
            /** @enum {string} */
            order_type: "dine-in" | "takeaway" | "delivery" | "online";
            table_no?: string;
            items: {
                /** Format: mongoId */
                menu_item_id?: string;
                quantity?: number;
                add_ons?: {
                    name?: string;
                    price?: number;
                }[];
            }[];
            /** @description Usually calculated on the server based on items and prices */
            total_amount: number;
            /** @description Usually calculated on the server */
            tax_amount?: number;
            discount?: number;
            /** @description Usually calculated on the server */
            net_amount: number;
            /** @enum {string} */
            payment_mode?: "Cash" | "Card" | "UPI" | "Wallet" | "Pending";
            /** @enum {string} */
            status?: "pending" | "confirmed" | "preparing" | "ready" | "served" | "completed" | "cancelled";
            /**
             * Format: mongoId
             * @description ID of the user creating the order
             */
            created_by: string;
            /** Format: mongoId */
            customer_id?: string;
            notes?: string;
        };
        RecipeIngredient: {
            /**
             * Format: mongoId
             * @description ID of the inventory item used
             */
            inventory_item_id: string;
            /** @description Quantity of the ingredient used */
            quantity: number;
            /** @description Unit of measurement (should match inventory item's unit) */
            unit: string;
        };
        Recipe: {
            /** Format: mongoId */
            _id?: string;
            /**
             * Format: mongoId
             * @description ID of the menu item this recipe is for (unique)
             */
            menu_item_id: string;
            ingredients: components["schemas"]["RecipeIngredient"][];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        RecipeInput: {
            /** Format: mongoId */
            menu_item_id: string;
            ingredients: components["schemas"]["RecipeIngredient"][];
        };
        GeoLocation: {
            lat?: number;
            lng?: number;
        };
        Address: {
            street?: string;
            city?: string;
            state?: string;
            postal_code?: string;
            country?: string;
            geo_location?: components["schemas"]["GeoLocation"];
        };
        Contact: {
            phone?: string;
            /** Format: email */
            email?: string;
            /** Format: url */
            website?: string;
        };
        OperatingHoursDetail: {
            /**
             * Format: time
             * @example 09:00
             */
            open?: string;
            /**
             * Format: time
             * @example 22:00
             */
            close?: string;
        };
        OperatingHours: {
            monday?: components["schemas"]["OperatingHoursDetail"];
            tuesday?: components["schemas"]["OperatingHoursDetail"];
            wednesday?: components["schemas"]["OperatingHoursDetail"];
            thursday?: components["schemas"]["OperatingHoursDetail"];
            friday?: components["schemas"]["OperatingHoursDetail"];
            saturday?: components["schemas"]["OperatingHoursDetail"];
            sunday?: components["schemas"]["OperatingHoursDetail"];
        };
        Restaurant: {
            /** Format: mongoId */
            _id?: string;
            name: string;
            description?: string;
            address?: components["schemas"]["Address"];
            contact?: components["schemas"]["Contact"];
            operating_hours?: components["schemas"]["OperatingHours"];
            cuisine_types?: string[];
            /** Format: mongoId */
            owner_id: string;
            images?: string[];
            payment_options?: string[];
            /** @enum {string} */
            status?: "active" | "inactive" | "pending_approval";
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        RestaurantInput: {
            /** @example My New Restaurant */
            name: string;
            /** @example Best food in town. */
            description?: string;
            address?: components["schemas"]["Address"];
            contact?: components["schemas"]["Contact"];
            operating_hours?: components["schemas"]["OperatingHours"];
            /** @example [
             *       "Italian",
             *       "Pizza"
             *     ] */
            cuisine_types?: string[];
            /**
             * Format: mongoId
             * @description ID of the user creating/owning the restaurant
             */
            owner_id: string;
            images?: string[];
            /** @example [
             *       "Card",
             *       "UPI"
             *     ] */
            payment_options?: string[];
            /**
             * @default pending_approval
             * @enum {string}
             */
            status: "active" | "inactive" | "pending_approval";
        };
        Transaction: {
            /** Format: mongoId */
            _id?: string;
            /** Format: mongoId */
            order_id: string;
            amount: number;
            /** @enum {string} */
            mode: "Cash" | "Card" | "UPI" | "Wallet";
            /** @description External transaction ID from payment gateway */
            transaction_id?: string;
            /** @enum {string} */
            status: "success" | "failed" | "pending";
            /** Format: date-time */
            createdAt?: string;
        };
        TransactionInput: {
            /** Format: mongoId */
            order_id: string;
            amount: number;
            /** @enum {string} */
            mode: "Cash" | "Card" | "UPI" | "Wallet";
            transaction_id?: string;
            /** @enum {string} */
            status: "success" | "failed" | "pending";
        };
        UserPreferences: {
            /** @example [
             *       "Indian",
             *       "Mexican"
             *     ] */
            favorite_cuisines?: string[];
            /** @example [
             *       "Pizza",
             *       "Pasta"
             *     ] */
            frequent_orders?: string[];
        };
        UserPermissions: {
            /** @default false */
            can_manage_menu: boolean;
            /** @default false */
            can_view_reports: boolean;
            /** @default false */
            can_edit_orders: boolean;
        };
        User: {
            /**
             * @description Unique identifier for the user
             * @example 60f7e1b9b5a5f3a9c8b5c8a5
             */
            _id?: string;
            /**
             * @description Full name of the user
             * @example John Doe
             */
            name: string;
            /**
             * Format: email
             * @description Email address of the user (must be unique)
             * @example user@example.com
             */
            email: string;
            /**
             * @description Phone number of the user (optional)
             * @example 1234567890
             */
            phone?: string;
            role: components["schemas"]["UserRole"];
            /**
             * Format: mongoId
             * @description ID of the restaurant the user belongs to
             * @example 60f7e1b9b5a5f3a9c8b5c8a6
             */
            restaurant_id: string;
            /**
             * Format: url
             * @description URL of the user's profile image (optional)
             * @example https://userimages.com/img1.jpg
             */
            profile_image?: string;
            preferences?: components["schemas"]["UserPreferences"];
            permissions?: components["schemas"]["UserPermissions"];
            /**
             * @description User's loyalty points (optional)
             * @example 120
             */
            loyalty_points?: number;
            /**
             * @description Status of the user account
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "suspended";
            /**
             * Format: date-time
             * @description Timestamp when the user was created
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Timestamp when the user was last updated
             */
            updatedAt?: string;
        };
        /**
         * @description Role of the user within the system
         * @example manager
         * @enum {string}
         */
        UserRole: "admin" | "manager" | "staff";
        UserInput: {
            /** @example Jane Doe */
            name: string;
            /**
             * Format: email
             * @example jane.doe@example.com
             */
            email: string;
            /** @example 9876543210 */
            phone?: string;
            /**
             * Format: password
             * @description User's password (will be hashed)
             * @example StrongPassword123
             */
            password: string;
            role: components["schemas"]["UserRole"];
            /**
             * Format: mongoId
             * @description ID of the restaurant to associate the user with
             * @example 60f7e1b9b5a5f3a9c8b5c8a6
             */
            restaurant_id: string;
            /** Format: url */
            profile_image?: string;
            preferences?: components["schemas"]["UserPreferences"];
            permissions?: components["schemas"]["UserPermissions"];
            loyalty_points?: number;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "suspended";
        };
        LoginUserInput: {
            /**
             * Format: email
             * @description User's email address for login
             * @example john.doe@example.com
             */
            email: string;
            /**
             * Format: password
             * @description User's password for login
             * @example StrongPassword123
             */
            password: string;
        };
        RecordPaymentDto: {
            /**
             * @description Amount paid
             * @example 150.5
             */
            amount: number;
            /**
             * @description Payment mode used
             * @example UPI
             * @enum {string}
             */
            mode: "Cash" | "Card" | "UPI" | "Wallet";
            /**
             * @description Optional external transaction ID from payment gateway
             * @example txn_123abc456def
             */
            transaction_id?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
